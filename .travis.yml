language: java

jdk:
  - openjdk8

# Travis가 어느 브랜치가 푸쉬되었을 때 수행할 지 지정
branches:
  only:
    - master

# Travis CI 서버의 Home에 그레이들을 통해 받은 의존성을 캐시하여 같은 의존성은 다음 배포 때 부터 다시 받지 않도록 설정
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

# master 브랜치에 푸쉬 되었을 때, 수행하는 명령어로 , 프로젝트 내부에둔 gradlew을 통해 clean&build 수행
script: "./gradlew clean build"

# before-deploy/ 밑에 deploy할 모든 파일들(jar,appsepc.yml,배포를 위한 스크립트)을 넣어 압축한 뒤, 이를 상위에 deploy 폴더에 옮긴다.
before_deploy:
  - mkdir -p before-deploy #Travis CI는 파일로 s3에 업로드가 불가능하다. 그래서 항상 디렉토리 생성을 해줘 야 함.
  - cp scripts/*.sh before-deploy/
  - cp appspec.yml before-deploy/
  - cp build/libs/*.jar before-deploy/
  - cd before-deploy && zip -r before-deploy *
  - cd ../ && mkdir -p deploy
  - mv before-deploy/before-deploy.zip deploy/springboot-webservice.zip


#aws s3,codeDeploy 과 같은 외부 서비스와 연동 될 행위들을 선언
deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
    bucket: lsm-springboot-webservice-build  #s3 버킷
    region: ap-northeast-2
    skip_cleanup: true
    acl: private # 파일접근을 private으로
    local_dir: deploy # before_deploy에서 생성한 디렉토리
    wait-until-deployed: true

  - provider: codedeploy
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
    bucket: lsm-springboot-webservice-build #s3 버킷
    key: springboot-webservice.zip  # 빌드파일을 압축해서 전달
    bundle_type: zip
    application: springboot-webservice # aws 웹 콘솔에서 등록한 codedeploy 애플리케이션
    deployment_group: springboot-webservice-group # aws 웹 콘솔에서 등록한 codedeploy 배포 그룹
    region: ap-northeast-2
    wait-until-deployed: true

#CI 실행 완료시 메일로 알람
notifications:
  email:
    recipients:
      - tsi0521o@gmail.com